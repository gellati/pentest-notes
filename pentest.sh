#!/usr/bin/bash

# simple for loop
for i in `seq 1 10`
do
	 echo "hello"
	 echo $i
done

## here are usage notes for some useful programs used for penetration testing

### nmap - scan network for open ports and other userful information about the network

# scan single host
nmap [ip address]

# scan range of hosts
nmap xx.xx.xx-xx

# ip address
# nmap scan will show which ports are open with services that respond
nmap -sS 192.xx.xx.x 


# 21 ftp, 22 ssh, 23 telnet, 25 smpt 80 http
nmap 22.22.22..22 -p 21,22,23,25,80
# can add ranges: -p 20-80

# if an open http port is found, then open that port with a web browser by typing the ip address in the navigation bar followed by the port. put : between ip address and port number

# try to find versions -sV
nmap 222.22.2 -p 80 -sV

# which versions of the operating system the host has
nmap 10.10.10 -O

# print results to file
nmap 1.2.31 -p 21 | tee outputfile.txt


# make grepable file
nmap xx.xx.xx.lx -p 22,23 -oG

# telnet not a secure protocol, passwords not secured

# scan to see if any of the 1000 most popular port numbers are open
nmap --top-ports 1000 xx.xx.xx.xx



### hydra  -   test different passwords and usernames to gain access to a server

#have file with username candicates
# -t maximum is 64

# hydra can be used with a file containing a list of potential usernames and another file containing a list of potential usernames to try to log in to a server
# -L takes a file with usernames, -l takes one username
# -P takse a file with passwords, -p takes one password
# -t number of tries per second. Number dependent on system abilities, 6 is fine for this computer. Max is 64, but with a high number many of them will return an error
# -v and -V verbose
# -e nsr try also reverse passwords and the usernames
hydra -L usernames.txt -P passwords.txt -e nsr -u -f -t 4 -v -V ip-address.1.1.1


### john - guess password the basis of hash file? did not use

# pot - store results in file
# guesses the hash files
john -wordlist:/rockoyo.txt -pot:deice.pot hashes.txt
