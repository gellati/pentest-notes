package PenCrypt;
use Class::Std;
use MIME::Base64 qw( decode_base64 );

sub new{
    my ($class) = @_;

    my $new_object = bless \do{my $anon_scalar}, $class;

    return $new_object;
}


sub base64decode{
    my $self = shift;
    my $input = shift;
    # check that string ends with "=", signifies a base64 encoding
    if( !(substr($input, -1, 1) eq "=")){
	print "not base 64!" . "\n";
	exit 1;
    }
    return decode_base64($input);
}

sub rot13{
    my $self = shift;
    my $input = shift;
    my $frame = shift;
    if(!defined $frame){
	$frame = 13;
    }

    chomp $input;

    my @ascii_char;
    my $char;

    # convert characters to ascii number codes
    while($input =~ m/(.)/g){
	push @ascii_char, ord $1;
    }

    # shift the frame for the characters
    my $resultstring = "";
    foreach(@ascii_char){
	if($_ >= 97 && $_ <= 122){
	    if((122 - $_) < $frame){
		$_ = 97 + ($frame - (123 - $_));
	    }
	    else{
		$_ += $frame;
	    }
	}

	elsif( $_ >= 64 && $_ <= 90){
	    if(( 90 - $_ ) < $frame){
		$_ = 97 + ($frame - (123 - $_));
	    }
	    else{
		$_ += $frame;
	    }
	}
	$resultstring .= chr($_); # append to the result string
    }

    return $resultstring;    
}
sub DESTROY{
    my $self = shift;
    return;
}

=head1 PenCrypt

Program to decode rotNN and base64 strings

=head2 Subroutines

=over 14

=item base64decode

Base64 decoder. Takes in a base64-encoded string, and returns a decoded string.

=item rot13

Substitution cipher encrypter/decrypter. Takes a string and optionally a number for the substitution frame.

=item DESTROY

Every inside-out class should include a destroy method. This method does nothing.

=back

=head2 Dependencies

Depends on the following imported classes:

=over 10

=item Class::Std

=item MIME::Base64

=back

=cut



1;
